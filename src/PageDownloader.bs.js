// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Decco = require("decco/src/Decco.js");
var Dumdum = require("./Dumdum.bs.js");
var Fetcher = require("./Fetcher.bs.js");
var Helpers = require("./Helpers.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var PromiseMonad = require("bs-promise-monad/src/PromiseMonad.bs.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");

function ids_encode(v) {
  return Decco.arrayToJson(Decco.stringToJson, v);
}

function ids_decode(v) {
  return Decco.arrayFromJson(Decco.stringFromJson, v);
}

function download_ids(param) {
  return PromiseMonad.$great$great$neg(Promise.all(Belt_Array.map(Belt_Array.keep("aąbcćdefghijklłmnoóprsśtuwyzźż".split(""), (function (a) {
                            return a.length > 0;
                          })), (function (l) {
                        return Fetcher.fetch_api(l.toLocaleUpperCase());
                      }))), (function (htmls) {
                var html = Caml_splice_call.spliceObjApply("", "concat", [htmls]);
                return Helpers.write_sync("./ids.json", JSON.stringify(Dumdum.id_of_api(html)));
              }));
}

function main(param) {
  var timer_name = "PAGE_TIMER";
  var page_loop = function (len0, count, id, rest) {
    return PromiseMonad.$great$great$pipe(PromiseMonad.$great$great$eq(PromiseMonad.$great$great$neg(Promise.all(Belt_Array.map(id, Fetcher.fetch_id)), (function (rs) {
                          return Belt_Array.forEach(rs, (function (param) {
                                        Helpers.write_sync("./pages/" + (String(param[1]) + ".html"), param[0]);
                                        return /* () */0;
                                      }));
                        })), (function (param) {
                      console.error("" + (String(count) + ("/" + (String(len0) + ""))));
                      var match = Helpers.hd_tl_arr(rest);
                      var hd = match[0];
                      if (hd !== undefined) {
                        return page_loop(len0, count + 1 | 0, hd, match[1]);
                      } else {
                        console.timeEnd(timer_name);
                        return Promise.resolve(42);
                      }
                    })), (function (err) {
                  console.error(err);
                  var rest$1 = Belt_Array.concat(rest, [id]);
                  var match = Helpers.hd_tl_arr(rest$1);
                  var hd = match[0];
                  if (hd !== undefined) {
                    return page_loop(len0, count, hd, match[1]);
                  } else {
                    return Promise.resolve(42);
                  }
                }));
  };
  console.time(timer_name);
  var ids = Helpers.partitions(Helpers.open_ids("ids2.json"), 50);
  var len0 = ids.length;
  var match = Helpers.hd_tl_arr(ids);
  var hd = match[0];
  if (hd !== undefined) {
    return page_loop(len0, 1, hd, match[1]);
  } else {
    return Promise.resolve(42);
  }
}

exports.ids_encode = ids_encode;
exports.ids_decode = ids_decode;
exports.download_ids = download_ids;
exports.main = main;
/* Dumdum Not a pure module */
