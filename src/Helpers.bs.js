// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Util = require("util");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Belt_Result = require("bs-platform/lib/js/belt_Result.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ExternalJs = require("./external.js");

function deep(x) {
  return Util.inspect(x, {
              depth: 50,
              colors: true
            });
}

function deep_log(x) {
  console.log(deep(x));
  return /* () */0;
}

function get_null(n) {
  return Belt_Option.getExn((n == null) ? undefined : Caml_option.some(n));
}

function get_null_or(n, o) {
  return Belt_Option.getWithDefault((n == null) ? undefined : Caml_option.some(n), o);
}

function hd_tl_arr(arr) {
  var hd = Belt_Array.get(arr, 0);
  var match = arr.length;
  var tl = match === 0 || match === 1 ? [] : Belt_Array.sliceToEnd(arr, 1);
  return /* tuple */[
          hd,
          tl
        ];
}

function partitions(arr, partition_size) {
  return Belt_Array.reverse(Belt_Array.map(Belt_Array.reduceWithIndex(arr, [], (function (acc, id, i) {
                        var match = Caml_int32.mod_(i, partition_size);
                        if (match !== 0) {
                          var tail = Belt_Array.sliceToEnd(acc, 1);
                          var head = Belt_Array.getExn(acc, 0);
                          return Belt_Array.concat([Belt_Array.concat([id], head)], tail);
                        } else {
                          return Belt_Array.concat([[id]], acc);
                        }
                      })), Belt_Array.reverse));
}

function arr_lst(arr) {
  var l = arr.length;
  if (l === 0) {
    return ;
  } else {
    return Caml_option.some(Caml_array.caml_array_get(arr, l - 1 | 0));
  }
}

function open_languages(prim) {
  return ExternalJs.open_languages(prim);
}

function pointer_of_od(prim) {
  return ExternalJs.pointer_of_od(prim);
}

function write_sync(prim, prim$1) {
  ExternalJs.write_sync(prim, prim$1);
  return /* () */0;
}

function read_sync(prim) {
  return ExternalJs.read_sync(prim);
}

function open_ids(prim) {
  return ExternalJs.open_ids(prim);
}

var $question$question = Belt_Option.flatMap;

var $caret$neg$caret = Belt_Result.flatMap;

var Operators = {
  $question$question: $question$question,
  $caret$neg$caret: $caret$neg$caret
};

var do_log = true;

exports.deep = deep;
exports.do_log = do_log;
exports.deep_log = deep_log;
exports.get_null = get_null;
exports.get_null_or = get_null_or;
exports.hd_tl_arr = hd_tl_arr;
exports.partitions = partitions;
exports.arr_lst = arr_lst;
exports.open_languages = open_languages;
exports.pointer_of_od = pointer_of_od;
exports.write_sync = write_sync;
exports.read_sync = read_sync;
exports.open_ids = open_ids;
exports.Operators = Operators;
/* util Not a pure module */
