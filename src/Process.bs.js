// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Decco = require("decco/src/Decco.js");
var Dumdum = require("./Dumdum.bs.js");
var Fetcher = require("./Fetcher.bs.js");
var Helpers = require("./Helpers.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Cheerio = require("cheerio");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Belt_Result = require("bs-platform/lib/js/belt_Result.js");
var PromiseMonad = require("bs-promise-monad/src/PromiseMonad.bs.js");

function data_encode(v) {
  return Js_dict.fromArray([
              /* tuple */[
                "id",
                Decco.stringToJson(v.id)
              ],
              /* tuple */[
                "name",
                Decco.stringToJson(v.name)
              ],
              /* tuple */[
                "part",
                Decco.stringToJson(v.part)
              ],
              /* tuple */[
                "origin",
                Decco.arrayToJson(Decco.stringToJson, v.origin)
              ],
              /* tuple */[
                "classif",
                Decco.arrayToJson((function (param) {
                        return Decco.arrayToJson(Decco.stringToJson, param);
                      }), v.classif)
              ],
              /* tuple */[
                "flex",
                Decco.arrayToJson((function (param) {
                        return Decco.arrayToJson(Decco.stringToJson, param);
                      }), v.flex)
              ]
            ]);
}

function data_decode(v) {
  var match = Js_json.classify(v);
  if (typeof match === "number" || match.tag !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  } else {
    var dict = match[0];
    var match$1 = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict, "id"), null));
    if (match$1.tag) {
      var e = match$1[0];
      return /* Error */Block.__(1, [{
                  path: ".id" + e.path,
                  message: e.message,
                  value: e.value
                }]);
    } else {
      var match$2 = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict, "name"), null));
      if (match$2.tag) {
        var e$1 = match$2[0];
        return /* Error */Block.__(1, [{
                    path: ".name" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }]);
      } else {
        var match$3 = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict, "part"), null));
        if (match$3.tag) {
          var e$2 = match$3[0];
          return /* Error */Block.__(1, [{
                      path: ".part" + e$2.path,
                      message: e$2.message,
                      value: e$2.value
                    }]);
        } else {
          var match$4 = Decco.arrayFromJson(Decco.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict, "origin"), null));
          if (match$4.tag) {
            var e$3 = match$4[0];
            return /* Error */Block.__(1, [{
                        path: ".origin" + e$3.path,
                        message: e$3.message,
                        value: e$3.value
                      }]);
          } else {
            var match$5 = Decco.arrayFromJson((function (param) {
                    return Decco.arrayFromJson(Decco.stringFromJson, param);
                  }), Belt_Option.getWithDefault(Js_dict.get(dict, "classif"), null));
            if (match$5.tag) {
              var e$4 = match$5[0];
              return /* Error */Block.__(1, [{
                          path: ".classif" + e$4.path,
                          message: e$4.message,
                          value: e$4.value
                        }]);
            } else {
              var match$6 = Decco.arrayFromJson((function (param) {
                      return Decco.arrayFromJson(Decco.stringFromJson, param);
                    }), Belt_Option.getWithDefault(Js_dict.get(dict, "flex"), null));
              if (match$6.tag) {
                var e$5 = match$6[0];
                return /* Error */Block.__(1, [{
                            path: ".flex" + e$5.path,
                            message: e$5.message,
                            value: e$5.value
                          }]);
              } else {
                return /* Ok */Block.__(0, [{
                            id: match$1[0],
                            name: match$2[0],
                            part: match$3[0],
                            origin: match$4[0],
                            classif: match$5[0],
                            flex: match$6[0]
                          }]);
              }
            }
          }
        }
      }
    }
  }
}

function words_encode(v) {
  return Decco.arrayToJson(data_encode, v);
}

function words_decode(v) {
  return Decco.arrayFromJson(data_decode, v);
}

var origin_map = Belt_Result.getExn(Dumdum.origin_map_decode(JSON.parse(Helpers.open_languages("languages.json"))));

var count = {
  contents: 0
};

function data_of_site(html, id) {
  var dom = Cheerio.load(html);
  var part = Dumdum.part_of_dom(dom);
  var classif = Dumdum.classif_of_dom(dom);
  var name = Dumdum.name_of_dom(dom);
  var flex;
  switch (part) {
    case "czasownik" :
        flex = Dumdum.conjugation_of_dom(dom);
        break;
    case "przymiotnik" :
        flex = Dumdum.adjective_of_dom(dom);
        break;
    case "rzeczownik" :
        flex = Dumdum.declension_of_dom(dom);
        break;
    default:
      flex = [];
  }
  var origin = Dumdum.origins_of_dom(dom, origin_map);
  return {
          id: id,
          name: name,
          part: part,
          origin: origin,
          classif: classif,
          flex: flex
        };
}

function $$process(ids, rest) {
  return PromiseMonad.$great$great$pipe(PromiseMonad.$great$great$eq(PromiseMonad.$great$great$neg(Promise.all(Belt_Array.map(ids, (function (id) {
                                return PromiseMonad.$great$great$neg(Fetcher.fetch_id(id), (function (param) {
                                              return data_of_site(param[0], param[1]);
                                            }));
                              }))), (function (words) {
                        return Belt_Array.forEach(words, (function (w) {
                                      var w$1 = JSON.stringify(data_encode(w));
                                      console.log("" + (String(w$1) + ","));
                                      return /* () */0;
                                    }));
                      })), (function (param) {
                    count.contents = count.contents + ids.length | 0;
                    var c = count.contents;
                    console.error("" + (String(c) + ""));
                    var match = Helpers.hd_tl_arr(rest);
                    var hd = match[0];
                    if (hd !== undefined) {
                      return $$process(hd, match[1]);
                    } else {
                      console.log("]");
                      return Promise.resolve(1);
                    }
                  })), (function (e) {
                var id = Helpers.deep(ids);
                console.error(e);
                console.error("id lost: " + (String(id) + ""));
                var match = Helpers.hd_tl_arr(rest);
                var tl = match[1];
                var hd = match[0];
                if (hd !== undefined) {
                  return $$process(hd, ids.length === 1 ? tl : Belt_Array.concat(tl, Belt_Array.map(ids, (function (id) {
                                          return [id];
                                        }))));
                } else {
                  console.log("]");
                  return Promise.resolve(1);
                }
              }));
}

function explode(ids) {
  console.log("[");
  var match = Helpers.hd_tl_arr(ids);
  var hd = match[0];
  if (hd !== undefined) {
    return $$process(hd, match[1]);
  } else {
    return Promise.resolve(1);
  }
}

exports.data_encode = data_encode;
exports.data_decode = data_decode;
exports.words_encode = words_encode;
exports.words_decode = words_decode;
exports.origin_map = origin_map;
exports.count = count;
exports.data_of_site = data_of_site;
exports.$$process = $$process;
exports.explode = explode;
/* origin_map Not a pure module */
