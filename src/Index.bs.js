// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Dumdum = require("./Dumdum.bs.js");
var Fetcher = require("./Fetcher.bs.js");
var Helpers = require("./Helpers.bs.js");
var Process = require("./Process.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var PromiseMonad = require("bs-promise-monad/src/PromiseMonad.bs.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");

((require('isomorphic-fetch')));

function main(param) {
  console.time("timer");
  console.log("[");
  Process.main(Helpers.open_ids("ids.json"));
  console.log("]");
  console.timeEnd("timer");
  return /* () */0;
}

var cids = Helpers.open_ids("ids.json");

PromiseMonad.$great$great$neg(Promise.all(Belt_Array.map(Belt_Array.keep("aąbcćdefghijklłmnoóprsśtuwyzźż".split(""), (function (a) {
                    return a.length > 0;
                  })), (function (l) {
                return Fetcher.fetch_api(l.toLocaleUpperCase());
              }))), (function (htmls) {
        var html = Caml_splice_call.spliceObjApply("", "concat", [htmls]);
        var ids = Dumdum.id_of_api(html);
        return Helpers.write_sync("./ids2.json", JSON.stringify(Belt_Array.keep(ids, (function (id) {
                              return !Belt_Array.some(cids, (function (a) {
                                            return a === id;
                                          }));
                            }))));
      }));

main(/* () */0);

var partition_size = 12;

var fetch_id_diff = /* () */0;

exports.partition_size = partition_size;
exports.main = main;
exports.fetch_id_diff = fetch_id_diff;
/*  Not a pure module */
